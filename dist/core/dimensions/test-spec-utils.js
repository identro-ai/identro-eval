"use strict";
/**
 * Utility functions for converting LLM-generated tests to TestSpec objects
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertLLMTestsToSpecs = convertLLMTestsToSpecs;
exports.extractContractFromOptions = extractContractFromOptions;
exports.extractLLMProviderFromOptions = extractLLMProviderFromOptions;
exports.validateLLMDependencies = validateLLMDependencies;
/**
 * Convert LLM-generated test cases to TestSpec objects
 *
 * @param llmGeneratedTests - Tests generated by LLM
 * @param dimension - Dimension name
 * @param agent - Agent information
 * @returns Array of TestSpec objects
 */
function convertLLMTestsToSpecs(llmGeneratedTests, dimension, agent) {
    const testSpecs = [];
    for (let i = 0; i < llmGeneratedTests.length; i++) {
        const generatedTest = llmGeneratedTests[i];
        // Extract and normalize evaluation criteria from the generated test
        // Support both old string[] format and new structured object[] format
        let evaluation_criteria;
        if (Array.isArray(generatedTest.evaluation_criteria) && generatedTest.evaluation_criteria.length > 0) {
            // Check if it's already in the new structured format
            if (typeof generatedTest.evaluation_criteria[0] === 'object' &&
                generatedTest.evaluation_criteria[0] !== null &&
                'criterion' in generatedTest.evaluation_criteria[0]) {
                // Already in correct format
                evaluation_criteria = generatedTest.evaluation_criteria;
            }
            else if (typeof generatedTest.evaluation_criteria[0] === 'string') {
                // Old string[] format - convert to new format
                evaluation_criteria = generatedTest.evaluation_criteria.map(c => ({
                    criterion: c
                }));
            }
        }
        const testSpec = {
            id: `${dimension}-llm-${i}`,
            dimension,
            input: generatedTest.input,
            expected: generatedTest.expected,
            evaluation_criteria, // Use snake_case to match new architecture
            agent: {
                id: agent.id || 'unknown',
                name: agent.name || 'unknown',
                framework: agent.framework || 'unknown',
            },
            metadata: {
                inputIndex: i,
                dimension,
                agentName: agent.name || 'unknown',
                generatedBy: 'llm',
                testName: generatedTest.name,
                rationale: generatedTest.rationale,
                category: generatedTest.category,
                priority: generatedTest.priority,
                expectedBehavior: generatedTest.expected,
            },
            priority: generatedTest.priority || 2,
        };
        testSpecs.push(testSpec);
    }
    return testSpecs;
}
/**
 * Extract agent contract from test generation options
 *
 * @param options - Test generation options
 * @returns Extracted contract or undefined
 */
function extractContractFromOptions(options) {
    return options.contract || options.llmProvider?.contract;
}
/**
 * Extract LLM provider from test generation options
 *
 * @param options - Test generation options
 * @returns LLM provider or undefined
 */
function extractLLMProviderFromOptions(options) {
    return options.llmProvider;
}
/**
 * Validate that required dependencies are available for LLM-powered test generation
 *
 * @param llmProvider - LLM provider instance
 * @param contract - Agent contract
 * @param dimensionName - Dimension name for error messages
 * @throws Error if dependencies are missing
 */
function validateLLMDependencies(llmProvider, contract, dimensionName) {
    if (!llmProvider) {
        throw new Error(`LLM provider is required for ${dimensionName} test generation. ` +
            'Please configure an LLM provider (OpenAI or Anthropic).');
    }
    if (!contract) {
        throw new Error(`Agent contract is required for ${dimensionName} test generation. ` +
            'Please ensure agent analysis was successful.');
    }
}
//# sourceMappingURL=test-spec-utils.js.map