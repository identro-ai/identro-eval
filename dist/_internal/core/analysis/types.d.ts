/**
 * Contract analysis types for intelligent test generation
 *
 * These types define the structure of extracted contracts,
 * analysis inputs/outputs, and test specifications.
 */
/**
 * Schema definition for input/output contracts
 */
export interface SchemaDefinition {
    type: 'object' | 'array' | 'string' | 'number' | 'boolean';
    properties?: Record<string, SchemaDefinition>;
    items?: SchemaDefinition;
    enum?: string[];
    required?: string[];
    description?: string;
    minimum?: number;
    maximum?: number;
    minLength?: number;
    maxLength?: number;
    dimension?: string;
}
/**
 * Test example extracted from prompts or documentation
 */
export interface TestExample {
    name: string;
    input: any;
    expectedOutput?: any;
    description?: string;
    source: 'prompt' | 'documentation' | 'code' | 'generated';
}
/**
 * Performance requirements extracted from contracts
 */
export interface PerformanceRequirements {
    maxLatencyMs?: number;
    minThroughput?: number;
    maxTokens?: number;
    timeoutMs?: number;
    retryable?: boolean;
}
/**
 * Extracted contract from agent analysis
 */
export interface ExtractedContract {
    /** Human-readable description of what the agent does */
    description: string;
    /** List of capabilities the agent claims to have */
    capabilities: string[];
    /** Input schema if determinable */
    inputSchema?: SchemaDefinition;
    /** Output schema if determinable */
    outputSchema?: SchemaDefinition;
    /** Examples found in prompts or code */
    examples?: TestExample[];
    /** Performance hints from the contract */
    performanceHints?: PerformanceRequirements;
    /** Confidence score (0-1) in our understanding */
    confidence: number;
    /** Where this contract was extracted from */
    extractedFrom: string[];
    /** Additional metadata */
    metadata?: Record<string, any>;
}
/**
 * Input for contract analysis
 */
export interface AnalysisInput {
    /** The main prompt or instruction */
    prompt?: string;
    /** System prompt if separate */
    systemPrompt?: string;
    /** Human message template */
    humanTemplate?: string;
    /** Few-shot examples */
    examples?: Array<{
        input: string;
        output: string;
    }>;
    /** Tool descriptions */
    tools?: Array<{
        name: string;
        description: string;
        parameters?: Record<string, any>;
    }>;
    /** Chain or agent description */
    description?: string;
    /** Agent/chain name */
    name?: string;
    /** Framework being used */
    framework: string;
    /** Additional context */
    context?: Record<string, any>;
}
/**
 * Result of contract analysis
 */
export interface ContractAnalysis {
    /** The extracted contract */
    contract: ExtractedContract;
    /** Generated test cases */
    testCases: GeneratedTestCase[];
    /** Suggested evaluation dimensions */
    suggestedDimensions: string[];
    /** Analysis timestamp */
    timestamp: string;
    /** Tokens used for analysis */
    tokensUsed?: number;
}
/**
 * Generated test case from contract
 */
export interface GeneratedTestCase {
    /** Test name */
    name: string;
    /** UI-friendly test description (5-7 words) */
    ui_description?: string;
    /** Test input */
    input: any;
    /** Expected output or validation */
    expected?: {
        output?: any;
        outputDimension?: string;
        category?: string;
        confidence_min?: number;
        confidence_max?: number;
        contains?: string[];
        excludes?: string[];
    };
    /** Evaluation criteria for LLM evaluation (generated by LLM) */
    evaluation_criteria?: string[];
    /** Why this test was generated */
    rationale: string;
    /** Test category */
    category: 'functional' | 'edge_case' | 'error_handling' | 'performance';
    /** Priority (1-5, 1 being highest) */
    priority: number;
}
/**
 * Extracted prompts from framework code
 */
export interface ExtractedPrompts {
    /** Main prompt templates */
    templates: Array<{
        name: string;
        content: string;
        variables: string[];
        type: 'prompt' | 'system' | 'human' | 'assistant';
        location: string;
        lineNumber?: number;
    }>;
    /** Few-shot examples */
    examples: Array<{
        input: string;
        output: string;
        description?: string;
    }>;
    /** Chain or agent descriptions */
    descriptions: string[];
    /** Tool definitions */
    tools: Array<{
        name: string;
        description: string;
        parameters?: Record<string, any>;
    }>;
    /** Output parsers or validators */
    validators?: Array<{
        type: string;
        schema?: any;
        description?: string;
    }>;
    /** Memory or context configuration */
    memory?: {
        type: string;
        configuration?: Record<string, any>;
    };
}
/**
 * Framework hint for better extraction
 */
export interface FrameworkHint {
    /** Framework name */
    framework: string;
    /** Common dimensions to look for */
    dimensions: string[];
    /** Import statements that indicate usage */
    imports: string[];
    /** Class names to search for */
    classNames: string[];
    /** Function names to search for */
    functionNames: string[];
}
/**
 * Test specification for identro.eval.json
 */
export interface TestSpecification {
    /** Agent name */
    agentName: string;
    /** Discovered contract */
    discoveredContract: ExtractedContract;
    /** Generated test cases */
    testCases: GeneratedTestCase[];
    /** Evaluation configuration */
    evaluationConfig: {
        dimensions: string[];
        timeout_ms: number;
        retries: number;
        parallel: boolean;
    };
    /** Metadata */
    metadata: {
        generatedAt: string;
        generatedBy: string;
        confidence: number;
        framework: string;
    };
}
//# sourceMappingURL=types.d.ts.map